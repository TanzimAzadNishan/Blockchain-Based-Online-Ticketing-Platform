"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.generated_flows_event_register_flow_event_register_flow_initiator_payload import GeneratedFlowsEventRegisterFlowEventRegisterFlowInitiatorPayload
from openapi_client.model.generated_flows_event_update_flow_event_update_flow_initiator_payload import GeneratedFlowsEventUpdateFlowEventUpdateFlowInitiatorPayload
from openapi_client.model.generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload import GeneratedFlowsTicketIssueFlowTicketIssueFlowInitiatorPayload
from openapi_client.model.generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload import GeneratedFlowsTicketRefundFlowTicketRefundFlowInitiatorPayload
from openapi_client.model.generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload import GeneratedFlowsTicketResellFlowTicketResellFlowInitiatorPayload
from openapi_client.model.generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload import GeneratedFlowsTicketSellFlowTicketSellFlowInitiatorPayload
from openapi_client.model.generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload import GeneratedFlowsTicketUpdateFlowTicketUpdateFlowInitiatorPayload
from openapi_client.model.generated_flows_user_update_flow_user_update_flow_initiator_payload import GeneratedFlowsUserUpdateFlowUserUpdateFlowInitiatorPayload
from openapi_client.model.generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload import GeneratedFlowsVendorRegisterFlowVendorRegisterFlowInitiatorPayload
from openapi_client.model.generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload import GeneratedFlowsVendorUpdateFlowVendorUpdateFlowInitiatorPayload
from openapi_client.model.generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload import GeneratedQueryFlowsEventInfoByVendorEventInfoByVendorInitiatorPayload
from openapi_client.model.generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload import GeneratedQueryFlowsTicketByEventIdTicketByEventIdInitiatorPayload
from openapi_client.model.generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload import GeneratedQueryFlowsTicketByLinearIdTicketByLinearIdInitiatorPayload
from openapi_client.model.generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload import GeneratedQueryFlowsTicketInfoByVendorTicketInfoByVendorInitiatorPayload
from openapi_client.model.generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload import GeneratedQueryFlowsUserByLinearIdUserByLinearIdInitiatorPayload
from openapi_client.model.generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload import GeneratedQueryFlowsVendorByLinearIdVendorByLinearIdInitiatorPayload
from openapi_client.model.invocation_error import InvocationError
from openapi_client.model.io_bluebank_braid_corda_server_progress_progress_notification import IoBluebankBraidCordaServerProgressProgressNotification
from openapi_client.model.net_corda_core_contracts_unique_identifier import NetCordaCoreContractsUniqueIdentifier
from openapi_client.model.net_corda_core_transactions_signed_transaction import NetCordaCoreTransactionsSignedTransaction


class CordappsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __cordapps(
            self,
            **kwargs
        ):
            """cordapps  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [str]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.cordapps = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [],
                'endpoint_path': '/cordapps',
                'operation_id': 'cordapps',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__cordapps
        )

        def __cordapps_cor_dapp_flows_flows_event_register_flow_event_register_flow_initiator(
            self,
            generated_flows_event_register_flow_event_register_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_event_register_flow_event_register_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_event_register_flow_event_register_flow_initiator(generated_flows_event_register_flow_event_register_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_event_register_flow_event_register_flow_initiator_payload (GeneratedFlowsEventRegisterFlowEventRegisterFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreContractsUniqueIdentifier
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_event_register_flow_event_register_flow_initiator_payload'] = \
                generated_flows_event_register_flow_event_register_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_event_register_flow_event_register_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreContractsUniqueIdentifier,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.EventRegisterFlow$EventRegisterFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_event_register_flow_event_register_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_event_register_flow_event_register_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_event_register_flow_event_register_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_event_register_flow_event_register_flow_initiator_payload':
                        (GeneratedFlowsEventRegisterFlowEventRegisterFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_event_register_flow_event_register_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_event_register_flow_event_register_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_event_update_flow_event_update_flow_initiator(
            self,
            generated_flows_event_update_flow_event_update_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_event_update_flow_event_update_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_event_update_flow_event_update_flow_initiator(generated_flows_event_update_flow_event_update_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_event_update_flow_event_update_flow_initiator_payload (GeneratedFlowsEventUpdateFlowEventUpdateFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreTransactionsSignedTransaction
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_event_update_flow_event_update_flow_initiator_payload'] = \
                generated_flows_event_update_flow_event_update_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_event_update_flow_event_update_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreTransactionsSignedTransaction,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.EventUpdateFlow$EventUpdateFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_event_update_flow_event_update_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_event_update_flow_event_update_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_event_update_flow_event_update_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_event_update_flow_event_update_flow_initiator_payload':
                        (GeneratedFlowsEventUpdateFlowEventUpdateFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_event_update_flow_event_update_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_event_update_flow_event_update_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_ticket_issue_flow_ticket_issue_flow_initiator(
            self,
            generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_ticket_issue_flow_ticket_issue_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_ticket_issue_flow_ticket_issue_flow_initiator(generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload (GeneratedFlowsTicketIssueFlowTicketIssueFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreTransactionsSignedTransaction
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload'] = \
                generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_ticket_issue_flow_ticket_issue_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreTransactionsSignedTransaction,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.TicketIssueFlow$TicketIssueFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_ticket_issue_flow_ticket_issue_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload':
                        (GeneratedFlowsTicketIssueFlowTicketIssueFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_ticket_issue_flow_ticket_issue_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_ticket_issue_flow_ticket_issue_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_ticket_refund_flow_ticket_refund_flow_initiator(
            self,
            generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_ticket_refund_flow_ticket_refund_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_ticket_refund_flow_ticket_refund_flow_initiator(generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload (GeneratedFlowsTicketRefundFlowTicketRefundFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreTransactionsSignedTransaction
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload'] = \
                generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_ticket_refund_flow_ticket_refund_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreTransactionsSignedTransaction,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.TicketRefundFlow$TicketRefundFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_ticket_refund_flow_ticket_refund_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload':
                        (GeneratedFlowsTicketRefundFlowTicketRefundFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_ticket_refund_flow_ticket_refund_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_ticket_refund_flow_ticket_refund_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_ticket_resell_flow_ticket_resell_flow_initiator(
            self,
            generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_ticket_resell_flow_ticket_resell_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_ticket_resell_flow_ticket_resell_flow_initiator(generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload (GeneratedFlowsTicketResellFlowTicketResellFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreTransactionsSignedTransaction
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload'] = \
                generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_ticket_resell_flow_ticket_resell_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreTransactionsSignedTransaction,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.TicketResellFlow$TicketResellFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_ticket_resell_flow_ticket_resell_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload':
                        (GeneratedFlowsTicketResellFlowTicketResellFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_ticket_resell_flow_ticket_resell_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_ticket_resell_flow_ticket_resell_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_ticket_sell_flow_ticket_sell_flow_initiator(
            self,
            generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_ticket_sell_flow_ticket_sell_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_ticket_sell_flow_ticket_sell_flow_initiator(generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload (GeneratedFlowsTicketSellFlowTicketSellFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreTransactionsSignedTransaction
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload'] = \
                generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_ticket_sell_flow_ticket_sell_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreTransactionsSignedTransaction,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.TicketSellFlow$TicketSellFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_ticket_sell_flow_ticket_sell_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload':
                        (GeneratedFlowsTicketSellFlowTicketSellFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_ticket_sell_flow_ticket_sell_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_ticket_sell_flow_ticket_sell_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_ticket_update_flow_ticket_update_flow_initiator(
            self,
            generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_ticket_update_flow_ticket_update_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_ticket_update_flow_ticket_update_flow_initiator(generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload (GeneratedFlowsTicketUpdateFlowTicketUpdateFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreTransactionsSignedTransaction
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload'] = \
                generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_ticket_update_flow_ticket_update_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreTransactionsSignedTransaction,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.TicketUpdateFlow$TicketUpdateFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_ticket_update_flow_ticket_update_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload':
                        (GeneratedFlowsTicketUpdateFlowTicketUpdateFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_ticket_update_flow_ticket_update_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_ticket_update_flow_ticket_update_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_user_register_flow_user_register_flow_initiator(
            self,
            body,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_user_register_flow_user_register_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_user_register_flow_user_register_flow_initiator(body, async_req=True)
            >>> result = thread.get()

            Args:
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreContractsUniqueIdentifier
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_user_register_flow_user_register_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreContractsUniqueIdentifier,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.UserRegisterFlow$UserRegisterFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_user_register_flow_user_register_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'invocation_id',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'body': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_user_register_flow_user_register_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_user_update_flow_user_update_flow_initiator(
            self,
            generated_flows_user_update_flow_user_update_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_user_update_flow_user_update_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_user_update_flow_user_update_flow_initiator(generated_flows_user_update_flow_user_update_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_user_update_flow_user_update_flow_initiator_payload (GeneratedFlowsUserUpdateFlowUserUpdateFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreTransactionsSignedTransaction
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_user_update_flow_user_update_flow_initiator_payload'] = \
                generated_flows_user_update_flow_user_update_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_user_update_flow_user_update_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreTransactionsSignedTransaction,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.UserUpdateFlow$UserUpdateFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_user_update_flow_user_update_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_user_update_flow_user_update_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_user_update_flow_user_update_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_user_update_flow_user_update_flow_initiator_payload':
                        (GeneratedFlowsUserUpdateFlowUserUpdateFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_user_update_flow_user_update_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_user_update_flow_user_update_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_vendor_register_flow_vendor_register_flow_initiator(
            self,
            generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_vendor_register_flow_vendor_register_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_vendor_register_flow_vendor_register_flow_initiator(generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload (GeneratedFlowsVendorRegisterFlowVendorRegisterFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreContractsUniqueIdentifier
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload'] = \
                generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_vendor_register_flow_vendor_register_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreContractsUniqueIdentifier,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.VendorRegisterFlow$VendorRegisterFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_vendor_register_flow_vendor_register_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload':
                        (GeneratedFlowsVendorRegisterFlowVendorRegisterFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_vendor_register_flow_vendor_register_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_vendor_register_flow_vendor_register_flow_initiator
        )

        def __cordapps_cor_dapp_flows_flows_vendor_update_flow_vendor_update_flow_initiator(
            self,
            generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_flows_vendor_update_flow_vendor_update_flow_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_flows_vendor_update_flow_vendor_update_flow_initiator(generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload (GeneratedFlowsVendorUpdateFlowVendorUpdateFlowInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NetCordaCoreTransactionsSignedTransaction
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload'] = \
                generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_flows_vendor_update_flow_vendor_update_flow_initiator = _Endpoint(
            settings={
                'response_type': (NetCordaCoreTransactionsSignedTransaction,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/Flows.VendorUpdateFlow$VendorUpdateFlowInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_flows_vendor_update_flow_vendor_update_flow_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload':
                        (GeneratedFlowsVendorUpdateFlowVendorUpdateFlowInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_flows_vendor_update_flow_vendor_update_flow_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_flows_vendor_update_flow_vendor_update_flow_initiator
        )

        def __cordapps_cor_dapp_flows_query_flows_event_info_by_vendor_event_info_by_vendor_initiator(
            self,
            generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_query_flows_event_info_by_vendor_event_info_by_vendor_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_query_flows_event_info_by_vendor_event_info_by_vendor_initiator(generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload (GeneratedQueryFlowsEventInfoByVendorEventInfoByVendorInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload'] = \
                generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_query_flows_event_info_by_vendor_event_info_by_vendor_initiator = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/QueryFlows.EventInfoByVendor$EventInfoByVendorInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_query_flows_event_info_by_vendor_event_info_by_vendor_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload':
                        (GeneratedQueryFlowsEventInfoByVendorEventInfoByVendorInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_query_flows_event_info_by_vendor_event_info_by_vendor_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_query_flows_event_info_by_vendor_event_info_by_vendor_initiator
        )

        def __cordapps_cor_dapp_flows_query_flows_ticket_by_event_id_ticket_by_event_id_initiator(
            self,
            generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_query_flows_ticket_by_event_id_ticket_by_event_id_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_query_flows_ticket_by_event_id_ticket_by_event_id_initiator(generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload (GeneratedQueryFlowsTicketByEventIdTicketByEventIdInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload'] = \
                generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_query_flows_ticket_by_event_id_ticket_by_event_id_initiator = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/QueryFlows.TicketByEventId$TicketByEventIdInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_query_flows_ticket_by_event_id_ticket_by_event_id_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload':
                        (GeneratedQueryFlowsTicketByEventIdTicketByEventIdInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_query_flows_ticket_by_event_id_ticket_by_event_id_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_query_flows_ticket_by_event_id_ticket_by_event_id_initiator
        )

        def __cordapps_cor_dapp_flows_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator(
            self,
            generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator(generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload (GeneratedQueryFlowsTicketByLinearIdTicketByLinearIdInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload'] = \
                generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/QueryFlows.TicketByLinearId$TicketByLinearIdInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload':
                        (GeneratedQueryFlowsTicketByLinearIdTicketByLinearIdInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_query_flows_ticket_by_linear_id_ticket_by_linear_id_initiator
        )

        def __cordapps_cor_dapp_flows_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator(
            self,
            generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator(generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload (GeneratedQueryFlowsTicketInfoByVendorTicketInfoByVendorInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload'] = \
                generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/QueryFlows.TicketInfoByVendor$TicketInfoByVendorInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload':
                        (GeneratedQueryFlowsTicketInfoByVendorTicketInfoByVendorInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_query_flows_ticket_info_by_vendor_ticket_info_by_vendor_initiator
        )

        def __cordapps_cor_dapp_flows_query_flows_user_by_linear_id_user_by_linear_id_initiator(
            self,
            generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_query_flows_user_by_linear_id_user_by_linear_id_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_query_flows_user_by_linear_id_user_by_linear_id_initiator(generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload (GeneratedQueryFlowsUserByLinearIdUserByLinearIdInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload'] = \
                generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_query_flows_user_by_linear_id_user_by_linear_id_initiator = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/QueryFlows.UserByLinearId$UserByLinearIdInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_query_flows_user_by_linear_id_user_by_linear_id_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload':
                        (GeneratedQueryFlowsUserByLinearIdUserByLinearIdInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_query_flows_user_by_linear_id_user_by_linear_id_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_query_flows_user_by_linear_id_user_by_linear_id_initiator
        )

        def __cordapps_cor_dapp_flows_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator(
            self,
            generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload,
            **kwargs
        ):
            """cordapps_cor_dapp_flows_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cor_dapp_flows_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator(generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload, async_req=True)
            >>> result = thread.get()

            Args:
                generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload (GeneratedQueryFlowsVendorByLinearIdVendorByLinearIdInitiatorPayload): payload

            Keyword Args:
                invocation_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload'] = \
                generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload
            return self.call_with_http_info(**kwargs)

        self.cordapps_cor_dapp_flows_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/cordapps/CorDapp/flows/QueryFlows.VendorByLinearId$VendorByLinearIdInitiator',
                'operation_id': 'cordapps_cor_dapp_flows_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload',
                    'invocation_id',
                ],
                'required': [
                    'generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload':
                        (GeneratedQueryFlowsVendorByLinearIdVendorByLinearIdInitiatorPayload,),
                    'invocation_id':
                        (str,),
                },
                'attribute_map': {
                    'invocation_id': 'invocation-id',
                },
                'location_map': {
                    'generated_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator_payload': 'body',
                    'invocation_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cordapps_cor_dapp_flows_query_flows_vendor_by_linear_id_vendor_by_linear_id_initiator
        )

        def __cordapps_cordapp_flows(
            self,
            cordapp,
            **kwargs
        ):
            """cordapps_cordapp_flows  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_cordapp_flows(cordapp, async_req=True)
            >>> result = thread.get()

            Args:
                cordapp (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [str]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['cordapp'] = \
                cordapp
            return self.call_with_http_info(**kwargs)

        self.cordapps_cordapp_flows = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [],
                'endpoint_path': '/cordapps/{cordapp}/flows',
                'operation_id': 'cordapps_cordapp_flows',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cordapp',
                ],
                'required': [
                    'cordapp',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cordapp':
                        (str,),
                },
                'attribute_map': {
                    'cordapp': 'cordapp',
                },
                'location_map': {
                    'cordapp': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__cordapps_cordapp_flows
        )

        def __cordapps_progress_tracker(
            self,
            **kwargs
        ):
            """cordapps_progress_tracker  # noqa: E501

            Connect to the Progress Tracker. This call will return chunked responses of all progress trackers  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cordapps_progress_tracker(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IoBluebankBraidCordaServerProgressProgressNotification
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.cordapps_progress_tracker = _Endpoint(
            settings={
                'response_type': (IoBluebankBraidCordaServerProgressProgressNotification,),
                'auth': [],
                'endpoint_path': '/cordapps/progress-tracker',
                'operation_id': 'cordapps_progress_tracker',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__cordapps_progress_tracker
        )
